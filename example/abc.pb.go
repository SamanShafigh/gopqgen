// Code generated by protoc-gen-go.
// source: abc.proto
// DO NOT EDIT!

/*
Package abc is a generated protocol buffer package.

It is generated from these files:
	abc.proto

It has these top-level messages:
	ListCourseOut
	ListStudentOut
	AddArg
	AddOut
	Membership
	VoidRes
	GetCourseByIdOut
	GetTeacherByIdArg
	ListTeacherOut
	GetstudentsofcourseArg
	IsuserincourseArg
	VoidArg
	GetCourseByIdArg
	GetStudentByIdArg
	GetStudentByIdOut
	ListMembershipOut
	IsuserincourseOut
	Teacher
	Student
	GetTeacherByIdOut
	GetstudentsofcourseOut
	Course
*/
package abc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enums
type Severity int32

const (
	Severity_UNKNOWN Severity = 0
	Severity_Easy    Severity = 1
	Severity_Medium  Severity = 2
	Severity_Hard    Severity = 3
)

var Severity_name = map[int32]string{
	0: "UNKNOWN",
	1: "Easy",
	2: "Medium",
	3: "Hard",
}
var Severity_value = map[string]int32{
	"UNKNOWN": 0,
	"Easy":    1,
	"Medium":  2,
	"Hard":    3,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}
func (Severity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Messages, Field Types
type ListCourseOut struct {
	Output *Course `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ListCourseOut) Reset()                    { *m = ListCourseOut{} }
func (m *ListCourseOut) String() string            { return proto.CompactTextString(m) }
func (*ListCourseOut) ProtoMessage()               {}
func (*ListCourseOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ListCourseOut) GetOutput() *Course {
	if m != nil {
		return m.Output
	}
	return nil
}

type ListStudentOut struct {
	Output *Student `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ListStudentOut) Reset()                    { *m = ListStudentOut{} }
func (m *ListStudentOut) String() string            { return proto.CompactTextString(m) }
func (*ListStudentOut) ProtoMessage()               {}
func (*ListStudentOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListStudentOut) GetOutput() *Student {
	if m != nil {
		return m.Output
	}
	return nil
}

type AddArg struct {
	Var1 int32 `protobuf:"varint,1,opt,name=var1" json:"var1,omitempty"`
	Var2 int32 `protobuf:"varint,2,opt,name=var2" json:"var2,omitempty"`
}

func (m *AddArg) Reset()                    { *m = AddArg{} }
func (m *AddArg) String() string            { return proto.CompactTextString(m) }
func (*AddArg) ProtoMessage()               {}
func (*AddArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AddOut struct {
	Var1 int32 `protobuf:"varint,1,opt,name=var1" json:"var1,omitempty"`
}

func (m *AddOut) Reset()                    { *m = AddOut{} }
func (m *AddOut) String() string            { return proto.CompactTextString(m) }
func (*AddOut) ProtoMessage()               {}
func (*AddOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Membership struct {
	Courseid  int32 `protobuf:"varint,1,opt,name=courseid" json:"courseid,omitempty"`
	Studentid int32 `protobuf:"varint,2,opt,name=studentid" json:"studentid,omitempty"`
}

func (m *Membership) Reset()                    { *m = Membership{} }
func (m *Membership) String() string            { return proto.CompactTextString(m) }
func (*Membership) ProtoMessage()               {}
func (*Membership) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type VoidRes struct {
}

func (m *VoidRes) Reset()                    { *m = VoidRes{} }
func (m *VoidRes) String() string            { return proto.CompactTextString(m) }
func (*VoidRes) ProtoMessage()               {}
func (*VoidRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetCourseByIdOut struct {
	Output *Course `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *GetCourseByIdOut) Reset()                    { *m = GetCourseByIdOut{} }
func (m *GetCourseByIdOut) String() string            { return proto.CompactTextString(m) }
func (*GetCourseByIdOut) ProtoMessage()               {}
func (*GetCourseByIdOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetCourseByIdOut) GetOutput() *Course {
	if m != nil {
		return m.Output
	}
	return nil
}

type GetTeacherByIdArg struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetTeacherByIdArg) Reset()                    { *m = GetTeacherByIdArg{} }
func (m *GetTeacherByIdArg) String() string            { return proto.CompactTextString(m) }
func (*GetTeacherByIdArg) ProtoMessage()               {}
func (*GetTeacherByIdArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ListTeacherOut struct {
	Output *Teacher `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ListTeacherOut) Reset()                    { *m = ListTeacherOut{} }
func (m *ListTeacherOut) String() string            { return proto.CompactTextString(m) }
func (*ListTeacherOut) ProtoMessage()               {}
func (*ListTeacherOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListTeacherOut) GetOutput() *Teacher {
	if m != nil {
		return m.Output
	}
	return nil
}

type GetstudentsofcourseArg struct {
	XCourseid int32 `protobuf:"varint,1,opt,name=_courseid,json=Courseid" json:"_courseid,omitempty"`
}

func (m *GetstudentsofcourseArg) Reset()                    { *m = GetstudentsofcourseArg{} }
func (m *GetstudentsofcourseArg) String() string            { return proto.CompactTextString(m) }
func (*GetstudentsofcourseArg) ProtoMessage()               {}
func (*GetstudentsofcourseArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type IsuserincourseArg struct {
	XStudentid int32 `protobuf:"varint,1,opt,name=_studentid,json=Studentid" json:"_studentid,omitempty"`
	XCourseid  int32 `protobuf:"varint,2,opt,name=_courseid,json=Courseid" json:"_courseid,omitempty"`
}

func (m *IsuserincourseArg) Reset()                    { *m = IsuserincourseArg{} }
func (m *IsuserincourseArg) String() string            { return proto.CompactTextString(m) }
func (*IsuserincourseArg) ProtoMessage()               {}
func (*IsuserincourseArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type VoidArg struct {
}

func (m *VoidArg) Reset()                    { *m = VoidArg{} }
func (m *VoidArg) String() string            { return proto.CompactTextString(m) }
func (*VoidArg) ProtoMessage()               {}
func (*VoidArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetCourseByIdArg struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetCourseByIdArg) Reset()                    { *m = GetCourseByIdArg{} }
func (m *GetCourseByIdArg) String() string            { return proto.CompactTextString(m) }
func (*GetCourseByIdArg) ProtoMessage()               {}
func (*GetCourseByIdArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetStudentByIdArg struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetStudentByIdArg) Reset()                    { *m = GetStudentByIdArg{} }
func (m *GetStudentByIdArg) String() string            { return proto.CompactTextString(m) }
func (*GetStudentByIdArg) ProtoMessage()               {}
func (*GetStudentByIdArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type GetStudentByIdOut struct {
	Output *Student `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *GetStudentByIdOut) Reset()                    { *m = GetStudentByIdOut{} }
func (m *GetStudentByIdOut) String() string            { return proto.CompactTextString(m) }
func (*GetStudentByIdOut) ProtoMessage()               {}
func (*GetStudentByIdOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetStudentByIdOut) GetOutput() *Student {
	if m != nil {
		return m.Output
	}
	return nil
}

type ListMembershipOut struct {
	Output *Membership `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ListMembershipOut) Reset()                    { *m = ListMembershipOut{} }
func (m *ListMembershipOut) String() string            { return proto.CompactTextString(m) }
func (*ListMembershipOut) ProtoMessage()               {}
func (*ListMembershipOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListMembershipOut) GetOutput() *Membership {
	if m != nil {
		return m.Output
	}
	return nil
}

type IsuserincourseOut struct {
	Var1 bool `protobuf:"varint,1,opt,name=var1" json:"var1,omitempty"`
}

func (m *IsuserincourseOut) Reset()                    { *m = IsuserincourseOut{} }
func (m *IsuserincourseOut) String() string            { return proto.CompactTextString(m) }
func (*IsuserincourseOut) ProtoMessage()               {}
func (*IsuserincourseOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Teacher struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Teacher) Reset()                    { *m = Teacher{} }
func (m *Teacher) String() string            { return proto.CompactTextString(m) }
func (*Teacher) ProtoMessage()               {}
func (*Teacher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Student struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password []byte `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Age      int32  `protobuf:"varint,5,opt,name=age" json:"age,omitempty"`
}

func (m *Student) Reset()                    { *m = Student{} }
func (m *Student) String() string            { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()               {}
func (*Student) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type GetTeacherByIdOut struct {
	Output *Teacher `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *GetTeacherByIdOut) Reset()                    { *m = GetTeacherByIdOut{} }
func (m *GetTeacherByIdOut) String() string            { return proto.CompactTextString(m) }
func (*GetTeacherByIdOut) ProtoMessage()               {}
func (*GetTeacherByIdOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetTeacherByIdOut) GetOutput() *Teacher {
	if m != nil {
		return m.Output
	}
	return nil
}

type GetstudentsofcourseOut struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *GetstudentsofcourseOut) Reset()                    { *m = GetstudentsofcourseOut{} }
func (m *GetstudentsofcourseOut) String() string            { return proto.CompactTextString(m) }
func (*GetstudentsofcourseOut) ProtoMessage()               {}
func (*GetstudentsofcourseOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type Course struct {
	Id        int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Teacherid int32    `protobuf:"varint,3,opt,name=teacherid" json:"teacherid,omitempty"`
	Severity  Severity `protobuf:"varint,4,opt,name=severity,enum=Severity" json:"severity,omitempty"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (m *Course) String() string            { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func init() {
	proto.RegisterType((*ListCourseOut)(nil), "ListCourseOut")
	proto.RegisterType((*ListStudentOut)(nil), "ListStudentOut")
	proto.RegisterType((*AddArg)(nil), "AddArg")
	proto.RegisterType((*AddOut)(nil), "AddOut")
	proto.RegisterType((*Membership)(nil), "membership")
	proto.RegisterType((*VoidRes)(nil), "VoidRes")
	proto.RegisterType((*GetCourseByIdOut)(nil), "GetCourseByIdOut")
	proto.RegisterType((*GetTeacherByIdArg)(nil), "GetTeacherByIdArg")
	proto.RegisterType((*ListTeacherOut)(nil), "ListTeacherOut")
	proto.RegisterType((*GetstudentsofcourseArg)(nil), "GetstudentsofcourseArg")
	proto.RegisterType((*IsuserincourseArg)(nil), "IsuserincourseArg")
	proto.RegisterType((*VoidArg)(nil), "VoidArg")
	proto.RegisterType((*GetCourseByIdArg)(nil), "GetCourseByIdArg")
	proto.RegisterType((*GetStudentByIdArg)(nil), "GetStudentByIdArg")
	proto.RegisterType((*GetStudentByIdOut)(nil), "GetStudentByIdOut")
	proto.RegisterType((*ListMembershipOut)(nil), "ListMembershipOut")
	proto.RegisterType((*IsuserincourseOut)(nil), "IsuserincourseOut")
	proto.RegisterType((*Teacher)(nil), "teacher")
	proto.RegisterType((*Student)(nil), "student")
	proto.RegisterType((*GetTeacherByIdOut)(nil), "GetTeacherByIdOut")
	proto.RegisterType((*GetstudentsofcourseOut)(nil), "GetstudentsofcourseOut")
	proto.RegisterType((*Course)(nil), "course")
	proto.RegisterEnum("Severity", Severity_name, Severity_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DatabaseService service

type DatabaseServiceClient interface {
	// SELECT id, name, email, password, age FROM student WHERE `id` = $1
	GetStudentById(ctx context.Context, in *GetStudentByIdArg, opts ...grpc.CallOption) (*GetStudentByIdOut, error)
	// SELECT id, title, teacherid, severity FROM course
	ListCourse(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListCourseOut, error)
	// SELECT courseid, studentid FROM membership
	ListMembership(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListMembershipOut, error)
	// SELECT id, name, email, password, age FROM student
	ListStudent(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListStudentOut, error)
	// SELECT id, name FROM teacher
	ListTeacher(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListTeacherOut, error)
	// SELECT * FROM add($1, $2)
	Add(ctx context.Context, in *AddArg, opts ...grpc.CallOption) (*AddOut, error)
	// SELECT id, title, teacherid, severity FROM course WHERE `id` = $1
	GetCourseById(ctx context.Context, in *GetCourseByIdArg, opts ...grpc.CallOption) (*GetCourseByIdOut, error)
	// SELECT id, name FROM teacher WHERE `id` = $1
	GetTeacherById(ctx context.Context, in *GetTeacherByIdArg, opts ...grpc.CallOption) (*GetTeacherByIdOut, error)
	// SELECT * FROM getstudentsofcourse($1)
	Getstudentsofcourse(ctx context.Context, in *GetstudentsofcourseArg, opts ...grpc.CallOption) (*GetstudentsofcourseOut, error)
	// SELECT * FROM isuserincourse($1, $2)
	Isuserincourse(ctx context.Context, in *IsuserincourseArg, opts ...grpc.CallOption) (*IsuserincourseOut, error)
}

type databaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseServiceClient(cc *grpc.ClientConn) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) GetStudentById(ctx context.Context, in *GetStudentByIdArg, opts ...grpc.CallOption) (*GetStudentByIdOut, error) {
	out := new(GetStudentByIdOut)
	err := grpc.Invoke(ctx, "/DatabaseService/GetStudentById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListCourse(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListCourseOut, error) {
	out := new(ListCourseOut)
	err := grpc.Invoke(ctx, "/DatabaseService/ListCourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListMembership(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListMembershipOut, error) {
	out := new(ListMembershipOut)
	err := grpc.Invoke(ctx, "/DatabaseService/ListMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListStudent(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListStudentOut, error) {
	out := new(ListStudentOut)
	err := grpc.Invoke(ctx, "/DatabaseService/ListStudent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListTeacher(ctx context.Context, in *VoidArg, opts ...grpc.CallOption) (*ListTeacherOut, error) {
	out := new(ListTeacherOut)
	err := grpc.Invoke(ctx, "/DatabaseService/ListTeacher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Add(ctx context.Context, in *AddArg, opts ...grpc.CallOption) (*AddOut, error) {
	out := new(AddOut)
	err := grpc.Invoke(ctx, "/DatabaseService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCourseById(ctx context.Context, in *GetCourseByIdArg, opts ...grpc.CallOption) (*GetCourseByIdOut, error) {
	out := new(GetCourseByIdOut)
	err := grpc.Invoke(ctx, "/DatabaseService/GetCourseById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetTeacherById(ctx context.Context, in *GetTeacherByIdArg, opts ...grpc.CallOption) (*GetTeacherByIdOut, error) {
	out := new(GetTeacherByIdOut)
	err := grpc.Invoke(ctx, "/DatabaseService/GetTeacherById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Getstudentsofcourse(ctx context.Context, in *GetstudentsofcourseArg, opts ...grpc.CallOption) (*GetstudentsofcourseOut, error) {
	out := new(GetstudentsofcourseOut)
	err := grpc.Invoke(ctx, "/DatabaseService/Getstudentsofcourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Isuserincourse(ctx context.Context, in *IsuserincourseArg, opts ...grpc.CallOption) (*IsuserincourseOut, error) {
	out := new(IsuserincourseOut)
	err := grpc.Invoke(ctx, "/DatabaseService/Isuserincourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatabaseService service

type DatabaseServiceServer interface {
	// SELECT id, name, email, password, age FROM student WHERE `id` = $1
	GetStudentById(context.Context, *GetStudentByIdArg) (*GetStudentByIdOut, error)
	// SELECT id, title, teacherid, severity FROM course
	ListCourse(context.Context, *VoidArg) (*ListCourseOut, error)
	// SELECT courseid, studentid FROM membership
	ListMembership(context.Context, *VoidArg) (*ListMembershipOut, error)
	// SELECT id, name, email, password, age FROM student
	ListStudent(context.Context, *VoidArg) (*ListStudentOut, error)
	// SELECT id, name FROM teacher
	ListTeacher(context.Context, *VoidArg) (*ListTeacherOut, error)
	// SELECT * FROM add($1, $2)
	Add(context.Context, *AddArg) (*AddOut, error)
	// SELECT id, title, teacherid, severity FROM course WHERE `id` = $1
	GetCourseById(context.Context, *GetCourseByIdArg) (*GetCourseByIdOut, error)
	// SELECT id, name FROM teacher WHERE `id` = $1
	GetTeacherById(context.Context, *GetTeacherByIdArg) (*GetTeacherByIdOut, error)
	// SELECT * FROM getstudentsofcourse($1)
	Getstudentsofcourse(context.Context, *GetstudentsofcourseArg) (*GetstudentsofcourseOut, error)
	// SELECT * FROM isuserincourse($1, $2)
	Isuserincourse(context.Context, *IsuserincourseArg) (*IsuserincourseOut, error)
}

func RegisterDatabaseServiceServer(s *grpc.Server, srv DatabaseServiceServer) {
	s.RegisterService(&_DatabaseService_serviceDesc, srv)
}

func _DatabaseService_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentByIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/GetStudentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetStudentById(ctx, req.(*GetStudentByIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/ListCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListCourse(ctx, req.(*VoidArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/ListMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListMembership(ctx, req.(*VoidArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/ListStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListStudent(ctx, req.(*VoidArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/ListTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListTeacher(ctx, req.(*VoidArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Add(ctx, req.(*AddArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCourseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseByIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCourseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/GetCourseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCourseById(ctx, req.(*GetCourseByIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetTeacherById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherByIdArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetTeacherById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/GetTeacherById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetTeacherById(ctx, req.(*GetTeacherByIdArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Getstudentsofcourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetstudentsofcourseArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Getstudentsofcourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/Getstudentsofcourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Getstudentsofcourse(ctx, req.(*GetstudentsofcourseArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Isuserincourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsuserincourseArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Isuserincourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseService/Isuserincourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Isuserincourse(ctx, req.(*IsuserincourseArg))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatabaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentById",
			Handler:    _DatabaseService_GetStudentById_Handler,
		},
		{
			MethodName: "ListCourse",
			Handler:    _DatabaseService_ListCourse_Handler,
		},
		{
			MethodName: "ListMembership",
			Handler:    _DatabaseService_ListMembership_Handler,
		},
		{
			MethodName: "ListStudent",
			Handler:    _DatabaseService_ListStudent_Handler,
		},
		{
			MethodName: "ListTeacher",
			Handler:    _DatabaseService_ListTeacher_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _DatabaseService_Add_Handler,
		},
		{
			MethodName: "GetCourseById",
			Handler:    _DatabaseService_GetCourseById_Handler,
		},
		{
			MethodName: "GetTeacherById",
			Handler:    _DatabaseService_GetTeacherById_Handler,
		},
		{
			MethodName: "Getstudentsofcourse",
			Handler:    _DatabaseService_Getstudentsofcourse_Handler,
		},
		{
			MethodName: "Isuserincourse",
			Handler:    _DatabaseService_Isuserincourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abc.proto",
}

func init() { proto.RegisterFile("abc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0x6d, 0x4f, 0x13, 0x41,
	0x10, 0xee, 0x7b, 0x7b, 0x53, 0x29, 0xed, 0x4a, 0xb4, 0x9e, 0x18, 0xc9, 0x12, 0x23, 0x21, 0x71,
	0x83, 0x25, 0x04, 0xe3, 0xb7, 0x82, 0x8a, 0x44, 0xa1, 0xc9, 0xe1, 0xcb, 0x47, 0x72, 0xed, 0xae,
	0xb0, 0x09, 0xe5, 0xea, 0xed, 0x1e, 0xa6, 0xff, 0xc4, 0x9f, 0x6b, 0xf6, 0xa5, 0x77, 0xbd, 0xed,
	0x99, 0xf4, 0xdb, 0xee, 0xb3, 0xf3, 0x4c, 0x67, 0x9e, 0x7b, 0x66, 0x0a, 0x5e, 0x38, 0x9e, 0x90,
	0x59, 0x1c, 0xc9, 0x08, 0x1f, 0xc0, 0xc6, 0x57, 0x2e, 0xe4, 0x69, 0x94, 0xc4, 0x82, 0x8d, 0x12,
	0x89, 0x5e, 0x42, 0x23, 0x4a, 0xe4, 0x2c, 0x91, 0xfd, 0xf2, 0x4e, 0x79, 0xaf, 0x3d, 0x68, 0x92,
	0x89, 0x7e, 0x0b, 0x2c, 0x8c, 0x07, 0xd0, 0x51, 0x8c, 0x2b, 0x99, 0x50, 0x76, 0x2f, 0x15, 0x65,
	0xc7, 0xa1, 0xb4, 0x88, 0x30, 0x8f, 0x29, 0xe7, 0x00, 0x1a, 0x43, 0x4a, 0x87, 0xf1, 0x0d, 0x42,
	0x50, 0x7b, 0x08, 0xe3, 0xb7, 0x3a, 0xb2, 0x1e, 0xe8, 0xb3, 0xc5, 0x06, 0xfd, 0x4a, 0x8a, 0x0d,
	0xf0, 0xb6, 0x66, 0xa8, 0xec, 0x05, 0x0c, 0xfc, 0x09, 0x60, 0xca, 0xa6, 0x63, 0x16, 0x8b, 0x5b,
	0x3e, 0x43, 0x3e, 0xb4, 0x4c, 0x8d, 0x9c, 0xda, 0xa8, 0xf4, 0x8e, 0xb6, 0xc1, 0xb3, 0xc5, 0x70,
	0x6a, 0x7f, 0x20, 0x03, 0xb0, 0x07, 0xcd, 0x1f, 0x11, 0xa7, 0x01, 0x13, 0xf8, 0x10, 0xba, 0x67,
	0xcc, 0xea, 0x70, 0x32, 0x3f, 0xa7, 0x6b, 0x69, 0xb1, 0x0b, 0xbd, 0x33, 0x26, 0xbf, 0xb1, 0x70,
	0x72, 0xcb, 0x62, 0xc5, 0x52, 0x2d, 0x76, 0xa0, 0x92, 0x16, 0x52, 0xe1, 0x74, 0x21, 0x98, 0x8d,
	0x2a, 0x16, 0x4c, 0x9a, 0xc7, 0x34, 0xf1, 0x11, 0x3c, 0x39, 0x63, 0xd2, 0x16, 0x2a, 0xa2, 0x5f,
	0xe6, 0x77, 0x55, 0xf6, 0xe7, 0xe0, 0x5d, 0xbb, 0xdd, 0x9e, 0xda, 0x3b, 0x1e, 0x41, 0xef, 0x5c,
	0x24, 0x82, 0xc5, 0xfc, 0x3e, 0x63, 0xbc, 0x00, 0xb8, 0xce, 0x34, 0x30, 0x14, 0xef, 0x6a, 0x01,
	0xe4, 0x13, 0x56, 0x9c, 0x84, 0x56, 0xa0, 0x61, 0x7c, 0x83, 0xb1, 0x23, 0x50, 0x51, 0xab, 0x46,
	0x0f, 0x9b, 0xfb, 0x7f, 0x41, 0x47, 0x6e, 0xd0, 0x7a, 0x1e, 0x7a, 0x07, 0x3d, 0x25, 0xe3, 0x45,
	0xfa, 0xdd, 0x15, 0x6d, 0xd7, 0xa1, 0xb5, 0x49, 0xe6, 0x8b, 0x94, 0xf9, 0xda, 0x55, 0xc5, 0xb5,
	0x55, 0xcb, 0xda, 0xea, 0x0d, 0x34, 0xed, 0x87, 0x70, 0x8b, 0x56, 0xe1, 0xf7, 0xe1, 0x94, 0x69,
	0x81, 0xbc, 0x40, 0x9f, 0xf1, 0x6f, 0x68, 0xda, 0x22, 0xd7, 0x09, 0x47, 0x5b, 0x50, 0x67, 0xd3,
	0x90, 0xdf, 0xf5, 0xab, 0x1a, 0x34, 0x17, 0x65, 0xde, 0x59, 0x28, 0xc4, 0x9f, 0x28, 0xa6, 0xfd,
	0xda, 0x4e, 0x79, 0xef, 0x51, 0x90, 0xde, 0x51, 0x17, 0xaa, 0xe1, 0x0d, 0xeb, 0xd7, 0x75, 0x5a,
	0x75, 0xb4, 0xda, 0x2d, 0x19, 0x6e, 0x3d, 0x3b, 0x9d, 0x14, 0xda, 0xc9, 0xca, 0xa0, 0x0b, 0x2d,
	0x17, 0x15, 0x5a, 0x59, 0x2a, 0x14, 0x0b, 0x68, 0x18, 0xda, 0x4a, 0xb3, 0x5b, 0x50, 0x97, 0x5c,
	0xde, 0x2d, 0xba, 0x35, 0x17, 0x35, 0x79, 0xb6, 0x0c, 0x4e, 0x75, 0xcb, 0xf5, 0x20, 0x03, 0xd0,
	0x2b, 0x68, 0x09, 0xf6, 0xc0, 0x62, 0x2e, 0xe7, 0xba, 0xed, 0xce, 0xc0, 0x23, 0x0b, 0x20, 0x48,
	0x9f, 0xf6, 0x8f, 0xb3, 0x30, 0xd4, 0x86, 0xe6, 0xf7, 0xcb, 0x2f, 0x97, 0xa3, 0x9f, 0x97, 0xdd,
	0x12, 0x6a, 0x41, 0xed, 0x63, 0x28, 0xe6, 0xdd, 0x32, 0x02, 0x68, 0x5c, 0x30, 0xca, 0x93, 0x69,
	0xb7, 0xa2, 0xd0, 0xcf, 0x61, 0x4c, 0xbb, 0xd5, 0xc1, 0xdf, 0x1a, 0x6c, 0x7e, 0x08, 0x65, 0x38,
	0x0e, 0x05, 0xbb, 0x62, 0xf1, 0x03, 0x9f, 0x30, 0xf4, 0x1e, 0x3a, 0x79, 0xe3, 0x21, 0x44, 0x56,
	0xec, 0xea, 0xbb, 0xd8, 0x28, 0x91, 0xb8, 0x84, 0xf6, 0x00, 0xb2, 0x3d, 0x89, 0x5a, 0xc4, 0x4e,
	0x85, 0xdf, 0x21, 0xb9, 0xf5, 0x89, 0x4b, 0xe8, 0xc0, 0x8c, 0x7b, 0xe6, 0xd3, 0xa5, 0x68, 0x44,
	0x56, 0x2c, 0x8c, 0x4b, 0x68, 0x1f, 0xda, 0x4b, 0x1b, 0x75, 0x29, 0x7c, 0x93, 0xe4, 0x37, 0x6d,
	0x16, 0x6b, 0x1d, 0xb0, 0x12, 0x9b, 0x2d, 0x19, 0x5c, 0x42, 0xcf, 0xa0, 0x3a, 0xa4, 0x14, 0x35,
	0x89, 0xd9, 0xbd, 0xbe, 0x3e, 0x98, 0xa7, 0x63, 0xd8, 0xc8, 0x0d, 0x33, 0xea, 0x11, 0x77, 0xb8,
	0x7d, 0x07, 0x32, 0x44, 0xa3, 0xe1, 0x92, 0x01, 0x8d, 0x86, 0xf9, 0x15, 0xe8, 0xbb, 0x98, 0xe1,
	0x9e, 0xc3, 0xe3, 0x02, 0x17, 0xa2, 0xa7, 0xa4, 0x78, 0xd5, 0xf9, 0x85, 0x0f, 0x69, 0x19, 0xf9,
	0x91, 0x46, 0x88, 0xac, 0x6c, 0x3e, 0xdf, 0xc5, 0x34, 0x77, 0xdc, 0xd0, 0xff, 0x7c, 0x87, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xba, 0xa6, 0xf7, 0x06, 0x07, 0x00, 0x00,
}
